# Zipline Zero-Downtime HA Cluster Configuration
# PROVEN SETUP - Copy this to cluster.env and update IPs

# === PROJECT SETTINGS ===
PROJECT_NAME=zipline                   # Application name
CLUSTER_NAME=${PROJECT_NAME}-ha-cluster

# === NODE CONFIGURATION (CHANGE THESE) ===  
NODE1_IP=10.10.10.150                 # Your first node IP  
NODE2_IP=10.10.10.105                 # Your second node IP

# === ZIPLINE CONFIGURATION ===
ZIPLINE_PORT=3000                      # Zipline web interface port
ZIPLINE_UPLOADS_PATH=./uploads         # Upload storage directory
ZIPLINE_PUBLIC_PATH=./public           # Public assets directory  
ZIPLINE_THEMES_PATH=./themes           # Custom themes directory

# === DATABASE CONFIGURATION ===
POSTGRES_VERSION=16                    # PostgreSQL version (tested with 16)
POSTGRES_DB=zipline                    # Database name
POSTGRES_ADMIN_USER=postgres           # Keep as 'postgres'
POSTGRES_ADMIN_PASSWORD=admin_secure_2024        # CHANGE: Strong admin password
POSTGRES_APP_USER=zipline              # Application user
POSTGRES_APP_PASSWORD=zipline_secure_2024        # CHANGE: Strong app password

# === REPLICATION SETTINGS ===
REPLICATION_USER=replicator            # Keep as 'replicator'
REPLICATION_PASSWORD=repl_secure_2024  # CHANGE: Strong replication password

# === NETWORK PORTS ===
POSTGRES_PORT=5432                     # PostgreSQL port
PATRONI_API_PORT=8008                  # Patroni REST API port
ETCD_CLIENT_PORT=2379                  # etcd client port
ETCD_PEER_PORT=2380                    # etcd peer port
HAPROXY_PRIMARY_PORT=5000              # HAProxy primary (read/write) port  
HAPROXY_REPLICA_PORT=5001              # HAProxy replica (read-only) port
HAPROXY_STATS_PORT=8404                # HAProxy statistics port

# === HAPROXY AUTHENTICATION ===
HAPROXY_STATS_USER=admin               # HAProxy stats username
HAPROXY_STATS_PASSWORD=haproxy_secure_2024   # CHANGE: HAProxy stats password

# === DOCKER SETTINGS ===
DOCKER_NETWORK_NAME=${PROJECT_NAME}-network           # Docker network name
DOCKER_VOLUME_PREFIX=${PROJECT_NAME}                  # Docker volume prefix

# === ADVANCED SETTINGS ===
ETCD_CLUSTER_TOKEN=${PROJECT_NAME}-etcd-cluster       # etcd cluster token

# === ZIPLINE SECRETS (GENERATED BY SCRIPT) ===
CORE_SECRET=7rO2GdjoxcEQWA0hDcAhqaoLw3B2SlXm

# ============================================================================
# DEPLOYMENT EXAMPLES FOR DIFFERENT ENVIRONMENTS
# ============================================================================

# Example 1: Production Environment
# NODE1_IP=10.0.1.10
# NODE2_IP=10.0.1.11
# ZIPLINE_PORT=3000
# POSTGRES_ADMIN_PASSWORD=prod_admin_secure_2024
# POSTGRES_APP_PASSWORD=prod_zipline_secure_2024
# REPLICATION_PASSWORD=prod_repl_secure_2024

# Example 2: Staging Environment  
# NODE1_IP=172.16.1.10
# NODE2_IP=172.16.1.11
# ZIPLINE_PORT=3001
# POSTGRES_ADMIN_PASSWORD=staging_admin_secure_2024
# POSTGRES_APP_PASSWORD=staging_zipline_secure_2024
# REPLICATION_PASSWORD=staging_repl_secure_2024

# Example 3: Development Environment
# NODE1_IP=192.168.100.10
# NODE2_IP=192.168.100.11
# ZIPLINE_PORT=3002
# POSTGRES_ADMIN_PASSWORD=dev_admin_secure_2024
# POSTGRES_APP_PASSWORD=dev_zipline_secure_2024
# REPLICATION_PASSWORD=dev_repl_secure_2024

# ============================================================================
# SECURITY NOTES
# ============================================================================
# 1. Change ALL passwords from default values
# 2. Use strong passwords (mix of letters, numbers, symbols)
# 3. Consider using environment-specific passwords
# 4. Store passwords securely (not in version control)
# 5. Rotate passwords regularly in production
# 6. Generate CORE_SECRET using the provided script

# ============================================================================
# DEPLOYMENT NOTES  
# ============================================================================
# 1. Ensure both nodes can reach each other
# 2. Open required ports in firewall (5000, 5001, 8404, 8008, 2379, 2380)
# 3. Test configuration in staging first
# 4. Monitor cluster health after deployment
# 5. Set up automated backups
# 6. Run generate-secrets.sh before first deployment
