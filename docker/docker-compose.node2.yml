version: '3.8'

# Zipline Zero-Downtime HA Cluster - Node 2 Production Deployment
# REAL 2-NODE SETUP - Deploy on second production node (10.10.10.105)

networks:
  zipline-network:
    driver: bridge

services:
  # etcd Node 2 - Distributed consensus (runs on Node 2)
  etcd2:
    image: quay.io/coreos/etcd:v3.5.6
    container_name: zipline-etcd2
    hostname: zipline-etcd2
    networks:
      - zipline-network
    environment:
      ETCD_NAME: etcd2
      ETCD_DATA_DIR: /etcd-data
      ETCD_LISTEN_CLIENT_URLS: http://0.0.0.0:2379
      ETCD_ADVERTISE_CLIENT_URLS: http://10.10.10.105:2379
      ETCD_LISTEN_PEER_URLS: http://0.0.0.0:2380
      ETCD_INITIAL_ADVERTISE_PEER_URLS: http://10.10.10.105:2380
      ETCD_INITIAL_CLUSTER: etcd1=http://10.10.10.150:2380,etcd2=http://10.10.10.105:2380
      ETCD_INITIAL_CLUSTER_STATE: new
      ETCD_INITIAL_CLUSTER_TOKEN: zipline-etcd-cluster
    ports:
      - "2379:2379"
      - "2380:2380"
    volumes:
      - zipline_etcd2_data:/etcd-data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Patroni Node 2 - PostgreSQL with Patroni HA (Replica candidate)
  patroni-node2:
    image: ghcr.io/zalando/spilo-16:3.3-p3
    container_name: zipline-patroni-node2
    hostname: zipline-patroni-node2
    networks:
      - zipline-network
    environment:
      SCOPE: zipline-ha-cluster
      ETCD3_PROTOCOL: http
      ETCD3_HOSTS: 10.10.10.150:2379,10.10.10.105:2379
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: admin_secure_2024
      POSTGRES_DB: zipline
      PGUSER_SUPERUSER: postgres
      PGPASSWORD_SUPERUSER: admin_secure_2024
      PGUSER_ADMIN: zipline
      PGPASSWORD_ADMIN: zipline_secure_2024
      PGUSER_STANDBY: replicator
      PGPASSWORD_STANDBY: repl_secure_2024
    ports:
      - "5432:5432"
      - "8008:8008"
    volumes:
      - zipline_patroni2_data:/home/postgres/pgdata
    depends_on:
      - etcd2
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8008/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # HAProxy Load Balancer - Node 2 (backup)
  haproxy:
    image: haproxy:2.8-alpine
    container_name: zipline-haproxy
    hostname: zipline-haproxy
    networks:
      - zipline-network
    ports:
      - "5000:5000"   # Primary (Read/Write)
      - "5001:5001"   # Replica (Read-Only)
      - "8404:8404"   # HAProxy Stats
    volumes:
      - ./configs/haproxy-production.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    depends_on:
      - patroni-node2
    restart: unless-stopped

  # Zipline Application - Node 2 (backup)
  zipline:
    image: ghcr.io/diced/zipline
    container_name: zipline-app
    hostname: zipline-app
    networks:
      - zipline-network
    ports:
      - '3000:3000'
    environment:
      # Connect through HAProxy for HA
      - DATABASE_URL=postgres://zipline:zipline_secure_2024@zipline-haproxy:5000/zipline
      - CORE_SECRET=7rO2GdjoVXLVlPNLKu4TFdlKx8KZBdXC
    depends_on:
      - patroni-node2
    volumes:
      - './uploads:/zipline/uploads'
      - './public:/zipline/public'
      - './themes:/zipline/themes'
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'wget', '-q', '--spider', 'http://localhost:3000/api/healthcheck']
      interval: 15s
      timeout: 2s
      retries: 2

volumes:
  zipline_etcd2_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/zipline/etcd2
  zipline_patroni2_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/zipline/patroni2
